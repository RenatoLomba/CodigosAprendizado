NPM

npm -version			--> Versão do NPM
npx create-react-app exemploapp	--> Cria um app React
npm start			--> Inicia um projeto React na pasta inicial do projeto
npm i react-router-dom		--> Instala o pacote Router para navegacao
npm i styled-components		--> Pacote de Componentes estilizados
npx create-react-native-app app	--> Cria um app React-Native
npm run android/ios/web		--> Roda o app em uma das opcoes a seguir (Android, IOS, Web)
npm i @react-navigation/native	--> Navigation entre telas
npm i @react-navigation/stack
npm i @react-navigation/bottom-tabs		--> Abas inferiores
npm i @react-native-community/async-storage	--> API Async
npm i @react-native-community/geolocation	--> Geolocalizacao
npm i react-native-permissions			--> Permissoes de usuario
npm i react-native-swiper			--> Swipe de tela
npm i react-native-svg				--> Trabalhar com icones SVG
npm i react-native-svg-transformer
npm i expo					--> Instala o Expo
npm i expo-cli --global

React

import React from 'react'				--> Importa a biblioteca React
import ReactDOM from 'react-dom'			--> Importa o ReactDOM, para iniciar exibição na tela
import './index.css'					--> Importa um arquivo que esta na mesma pasta
const rootElement = document.getElementById('root')	--> Recupera o elemento root da index.html
ReactDOM.render('Hello World!!!', rootElement)		--> Renderiza a string dentro do elemento passado
ReactDOM.render(<h1>Olá<h1>, rootElement)		--> Renderiza o elemento html dentro do elemento root
const tag = <h1>Olá<h1>					--> Tag html dentro de uma constante ou variavel
ReactDOM.render({ tag }, rootElement)			--> Renderiza a constante passada dentro de chaves
export default function Exemplo() {}			--> Exporta um componente
import Exemplo from './components/basicos/Exemplo'	--> Importa o componente Exemplo
ReactDOM.render(<Exemplo></Exemplo>, rootElement)	--> Utiliza o componente Exemplo
export default function Exemplo(props) {}		--> Componente que recebe parâmetros dentro de um objeto
<Exemplo parametro={"Este é um parâmetro"></Exemplo>}	--> Chama o componente passando os parâmetros a ele
<><Componente></Componente></>				--> React fragments necessários para encapsular Componentes e Tags JSX
<div className="NomeClasse"></div>			--> Utiliza uma classe CSS em React
{props.children}					--> Recupera os Elementos filhos que estão dentro do Componente
style={backgroundColor: props.color}			--> Passa uma propriedade como parametro pro estilo CSS
React.cloneElement(Componente, { propriedades, })	--> Clona um Componente passando propriedades para o mesmo
React.Children.map(props.children, (child) => { return something })	--> Para cada um dos filhos, retorna alguma coisa (semelhante ao forEach)
lista.map((item) => { return <li>{item}</li> })		--> Mapeia um array de Js para um array de objetos JSX com elementos e componentes
import React, {useState} from 'react'			--> Importa a hook useState para utilizar estados
const [nome, setNome] = useState('Estado Inicial')	--> Define um estado inicial para uma const nome e uma função que irá alterar seu valor futuramente setNome
<input value={valor} onChange={(e) => setValor(e.target.value)} />	--> Input controlado, seu valor só é alterado por uma função callback que modifique seu estado
<input value={valor} readOnly />			--> Input com valor somente leitura, não pode ser alterado pelo usuário
<input value={undefined} />				--> Input não controlado, seu valor pode ser qualquer coisa, não tem ligação com nada
this.setState({ key: valor })				--> Atualiza o valor na chave passada
this.setState({ key })					--> Atualiza o estado do componente com o mesmo nome do objeto passado
string.join('-')					--> Junta cada elemento de um array em uma string separada pelo valor passado

Navegação com Router
import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'	--> Importa o Router
<Router>Conteudo, Componentes, etc</Router>		--> Todo o conteúdo da página deve ficar dentro da tag Router
<Switch><Route></Rout></Switch>				--> Switch verifica as Routes que ele escolherá para renderizar
<Route path="/" exact={true} component={Home} />	--> Configura um componente Home como sendo rota padrão (path="/")
<Route path="/about" component={About} />		--> Configura uma rota para o componente About
<Link to="/about">About</Link>				--> Componente Link que renderiza o componente da rota passada
<Route path="/about/:id" component={About} />		--> :id Significa que a Rota recebe parâmetros na chamada
<Link to="/about/123">About</Link>			--> Chama a rota about/ passando o parametro 123 que é o :id
import { useParams } from 'react-router-dom'		--> Importa o Hook para usar parametros da URL no Componente
const { id } = useParams()				--> Passa o parâmetro Id passado na URL para um objeto id
<Route path="*" component={NoMatch}			--> A ultima rota passada na configuração do Switch será uma rota Fallback, onde caso a página não seja encontrada, cairá nessa rota
const location = useLocation()				--> Hook do Router utilizada para pegar a url da pagina
{location.pathname}					--> Retorna o caminho da pagina

Hooks
const [valor, setValor] = useState(valorInicial)	--> Cria um estado no componente funcional
onClick={() => setValor(novoValor)}			--> Usa uma função para alterar o estado do componente
const [objeto, setObjeto] = useState({objeto})		--> Passo um objeto para o estado
setObjeto({ ...objeto, atributo: atributoNovo })	--> Altero um atributo do objeto sem prejudicar os outros
/** OBS **/	--> SEMPRE QUE UM ESTADO DO COMPONENTE É ALTERA, O COMPONENTE É RENDERIZADO NOVAMENTE
onClick={() => setValor(valor + 1)}			--> Adiciona +1 ao valor
onClick={() => setValor(current => current + 1000)}	--> Current é o valor atual, que pode ser trabalhado
<input type="text" className="input" value={name} />	--> Vincula o valor de um estado ao input
useEffect(() => ação, [valor])				--> Sempre que o valor passado em [] for modificado, executa este Efeito
const count = useRef(0)					--> Ref cria uma referencia de objeto que não é re-renderizado quando seu estado é afetado, diferente de useState
const result = useMemo(() => soma(n1, n2), [n1, n2])	--> Retorna um valor memorizado, e a função só será chamada quando uma das dependencias for atualizada
useCallback((val) => {setCount(current => current + val)}, [setCount])	--> Função armazenada em memório, que será renderiza uma única vez pois nunca muda
export default React.memo(Componente)			--> Memo indica que o componente pode ser armazenado em cash e não precisa ser renderizado várias vezes
const [state, dispatch] = useReducer(reducer, initialState)	--> Reducer, outra forma de controlar componentes, recebe uma função para modificar os dados e um estado inicial

Context API
export const dados = { num: 123, text: "API Context" }
const DataContext = React.createContext(dados)		--> Crio um contexto que receberá dados que serão utilizados por vários componentes
export default DataContext
import DataContext, { dados }
<DataContext.Provider value={dados}><App /></DataContext.Provider> --> Envolve toda a aplicação no contexto
const contexto = useContext(DataContext)		--> Retorna os dados passados para o Contexto, podendo ser acessado de qualquer local da aplicação

React Native
import 'react-native-gesture-handler'			--> Biblioteca para gestos
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />	--> Em andoid/src/main/AndroidManifest.xml (necessario para usar geolocalização)
import { NavigationContainer } from '@react-navigation/native'	--> Biblioteca do React Navigation
<NavigationContainer></>				--> Container principal que ficarão as Stacks

Next Js

npx create-next-app --example with-styled-components	--> Criar aplicação em Next Js
npm run dev						--> Roda a aplicação
import Head from 'next/head'				--> Componente da Header do html
npm install eslint --dev				--> Instala o Eslint, ferramenta para padronização de código do JavaScript
eslint --init						--> Roda as configuracoes do Eslint
eslint --fix						--> Ajusta o código
e.preventDeafult()					--> Prevém que a página seja recarregada no submit do form
const router = useRouter(); router.push('/page')	--> Roteamento que manda para outra pagina
router.push('/page?name=Renato')			--> Passando parâmetros na URL